

---
version: "3.8"
name: nautobotexample
services:
  nautobot:
    image: "bsmeding/nautobot:2.2"
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - "./nautobot:/opt/nautobot"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: "unless-stopped"
    command: "nautobot-server runserver"
    env_file:
      - "local.env"
      - "creds.env"

  celery_worker:
    image: "bsmeding/nautobot:2.2"
    entrypoint:
      - "sh"
      - "-c"  # this is to evaluate the $NAUTOBOT_LOG_LEVEL from the env
      - "nautobot-server celery worker -l $$NAUTOBOT_LOG_LEVEL --events"  ## $$ because of docker-compose
    depends_on:
      - "nautobot"
    healthcheck:
      interval: "30s"
      timeout: "10s"
      start_period: "30s"
      retries: 3
      test:
        [
          "CMD",
          "bash",
          "-c",
          "nautobot-server celery inspect ping --destination celery@$$HOSTNAME"  ## $$ because of docker-compose
        ]
    env_file:
      - "local.env"
      - "creds.env"
   
  celery_beat:
    image: "bsmeding/nautobot:2.2"
    entrypoint:
      - "sh"
      - "-c"  # this is to evaluate the $NAUTOBOT_LOG_LEVEL from the env
      - "nautobot-server celery beat -l $$NAUTOBOT_LOG_LEVEL"  ## $$ because of docker-compose
    depends_on:
      - "nautobot"
    healthcheck:
      disable: true
    env_file:
      - "local.env"
      - "creds.env"

  redis:
    image: "redis:6-alpine"
    command:
      - "sh"
      - "-c"  # this is to evaluate the $NAUTOBOT_REDIS_PASSWORD from the env
      - "redis-server --appendonly yes --requirepass $$NAUTOBOT_REDIS_PASSWORD"
    env_file:
      - "local.env"
      - "creds.env"

  db:
    image: "postgres:13-alpine"
    env_file:
      - "local.env"
      - "creds.env"
    command:
      - "-c"
      - "max_connections=1000"
    volumes:
      # - "./nautobot.sql:/tmp/nautobot.sql"
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test: "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB"
      interval: "10s"
      timeout: "5s"
      retries: 10

volumes:
  postgres_data: {}
