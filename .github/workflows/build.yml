name: Build & Publish Nautobot

on:
  push:
    branches: [ main ]
  schedule:
    # GitHub cron is UTC; this runs daily at 00:17 UTC (~02:17 Amsterdam during CEST)
    - cron: "17 0 * * *"
  workflow_dispatch:

concurrency:
  group: build-matrix-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # ------- 1.6 patch builds (also publish "1.6" floating) -------
          - { version: "1.6.31", python_version: "3.10" }
          - { version: "1.6.31", python_version: "3.11" }
          - { version: "1.6.32", python_version: "3.10" }
          - { version: "1.6.32", python_version: "3.11" }
          # ------- 2.4 patch builds (also publish "2.4" floating) -------
          - { version: "2.4.17", python_version: "3.10" }
          - { version: "2.4.17", python_version: "3.11" }
          - { version: "2.4.17", python_version: "3.12" }
          - { version: "2.4.18", python_version: "3.10" }
          - { version: "2.4.18", python_version: "3.11" }
          - { version: "2.4.18", python_version: "3.12" }
          - { version: "2.4.19", python_version: "3.10" }
          - { version: "2.4.19", python_version: "3.11" }
          - { version: "2.4.19", python_version: "3.12" }

          # ------- Upstream tracking tags (single default Python) -------
          - { version: "stable", python_version: "default" }
          - { version: "latest", python_version: "default" }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Update Docker Hub description once per workflow (avoid doing it for every matrix job)
      - name: Docker Hub Description
        if: matrix.version == 'latest' && matrix.python_version == 'default'
        uses: peter-evans/dockerhub-description@v5
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: bsmeding/nautobot

      - name: Setup Build Info (tags & args)
        shell: bash
        run: |
          BASE_TAG="${{ matrix.version }}"
          PYV="${{ matrix.python_version }}"
          if [[ "$PYV" == "default" ]]; then
            PYTHON_VER="3.12"
            base_tag="bsmeding/nautobot:${BASE_TAG}"
            py_suffix=""
          else
            PYTHON_VER="$PYV"
            base_tag="bsmeding/nautobot:${BASE_TAG}-py${PYTHON_VER}"
            py_suffix="-py${PYTHON_VER}"
          fi

          # Start with the primary tag
          TAGS=("$base_tag")

          # If BASE_TAG is a full patch X.Y.Z, also add floating X.Y (and optionally X.Y-latest)
          if [[ "$BASE_TAG" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            minor="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            TAGS+=("bsmeding/nautobot:${minor}${py_suffix}")
            # If you also want "2.4-latest" style, uncomment next line:
            # TAGS+=("bsmeding/nautobot:${minor}-latest${py_suffix}")
          fi

          {
            echo "BASE_TAG=$BASE_TAG"
            echo "PYTHON_VER=$PYTHON_VER"
            echo "TAGS<<EOF"
            printf "%s\n" "${TAGS[@]}"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Debug Info
        run: |
          echo "Upstream base tag (BASE_TAG): ${{ env.BASE_TAG }}"
          echo "Python version (PYTHON_VER):  ${{ env.PYTHON_VER }}"
          echo "Will push tags:"
          echo "${{ env.TAGS }}"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          pull: true          # always fetch newest upstream base (stable/latest move)
          no-cache: true      # avoid stale layers when upstream moves
          build-args: |
            BASE_TAG=${{ env.BASE_TAG }}
            PYTHON_VER=${{ env.PYTHON_VER }}
          tags: ${{ env.TAGS }}
